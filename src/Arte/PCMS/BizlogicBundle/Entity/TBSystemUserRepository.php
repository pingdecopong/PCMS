<?php

namespace Arte\PCMS\BizlogicBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;

/**
 * TBSystemUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * copy from Symfony\Bridge\Doctrine\Security\User\EntityUserProvider
 */
class TBSystemUserRepository extends EntityRepository implements UserProviderInterface
{
    public function loadUserByUsername($username)
    {
        $q = $this
            ->createQueryBuilder('u')
            ->where('u.Username = :Username')
            ->andWhere('u.DeleteFlag = false')
            ->andWhere('u.Active = true')
            ->setParameter('Username', $username)
            ->getQuery();

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            $message = sprintf(
                'Unable to find an active admin AcmeUserBundle:User object identified by "%s".',
                $username
            );
            throw new UsernameNotFoundException($message, 0, $e);
        }

        return $user;
    }

    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
                sprintf(
                    'Instances of "%s" are not supported.',
                    $class
                )
            );
        }

        /* @var $queryBuilder \Doctrine\ORM\QueryBuilder */
        $queryBuilder = $this->createQueryBuilder('u')
            ->leftjoin('u.TBDepartmentDepartmentId', 'd')
            ->andWhere('u.DeleteFlag = false')
            ->andWhere('u.id = :id')
            ->setParameter('id', $user->getId())
            ->select(array(
                'u',
                'd',
            ))
        ;
        return $queryBuilder->getQuery()->getSingleResult();



//        $builder = $this->createQueryBuilder('u');
//        $builder ->leftJoin('u.TBDepartmentDepartmentId', 'd')
//            ->select(array('u', 'd'))
//            ->andWhere('u.id = :id')
//            ->andWhere('u.DeleteFlag = :DeleteFlag')
//            ->setParameter('id', $user->getId())
//            ->setParameter('DeleteFlag', false);
//        return $builder->getQuery()->getSingleResult();

//        return $this->find($user->getId());
    }

    public function supportsClass($class)
    {
        return $this->getEntityName() === $class
        || is_subclass_of($class, $this->getEntityName());
    }
}
